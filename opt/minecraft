#!/usr/bin/env bash

mc_port=25565
rcon_port=25575
port=${1:-${PORT:-8080}}

if [ -z "$NGROK_API_TOKEN" ]; then
  echo "You must set the NGROK_API_TOKEN config var to create a TCP tunnel!"
  exit 1
fi

# Start the TCP tunnel
ngrok_cmd="bin/ngrok tcp -authtoken $NGROK_API_TOKEN -config ngrok.yml -log stdout --log-level debug ${NGROK_OPTS} ${mc_port}"
echo "Starting ngrok..."
eval "while true; do echo \"web_addr: localhost:4040\" > \"ngrok.yml\"; $ngrok_cmd | tee ngrok.log; done &"
ngrok_pid=$!

echo "Starting chisel..."
eval "while true; do bin/chisel server --socks5 --proxy localhost:12345; done &"
chisel_pid=$!

# Do an inline sync first, then start the background job
echo "Starting sync..."
bin/sync
eval "while true; do sleep ${DROPBOX_SYNC_INTERVAL:-300}; bin/sync; done &"
sync_pid=$!

# create server config
# echo "server-port=${mc_port}" >> /app/server.properties
# touch whitelist.json
# touch banned-players.json
# touch banned-ips.json
# touch ops.json

limit=$(ulimit -u)
case $limit in
  512)   # 2X Dyno
  heap="768m"
  ;;
  32768) # PX Dyno
  heap="4g"
  ;;
  *)     # 1X Dyno
  heap="384m"
  ;;
esac

echo "Starting: minecraft ${mc_port} ${limit}"
eval "java -Xmx${heap} -Xms${heap} -jar minecraft.jar nogui &"
main_pid=$!

#Start rcon tunnel
addr=$(grep -oP '(?<=web_addr: )[^\n]+' ngrok.yml | tr -d '\n')
curl -H "Content-Type: application/json" -X POST -d '{"addr":'$rcon_port',"proto":"tcp", "name":"rcon"}' "http://${addr}/api/tunnels"

trap "kill $ngrok_pid $main_pid $sync_pid $chisel_pid; bin/sync" SIGTERM
trap "kill -9 $ngrok_pid $main_pid $sync_pid $chisel_pid; bin/sync; exit" SIGKILL

# eval "ruby -rwebrick -e'WEBrick::HTTPServer.new(:BindAddress => \"0.0.0.0\", :Port => ${port}, :MimeTypes => {\"rhtml\" => \"text/html\"}, :DocumentRoot => Dir.pwd).start'"
eval "ruby -rwebrick -e'WEBrick::HTTPServer.new(:BindAddress => \"localhost\", :Port => 12345, :MimeTypes => {\"rhtml\" => \"text/html\"}, :DocumentRoot => Dir.pwd).start'"
